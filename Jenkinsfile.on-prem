@Library("pipeline-general@5.0.17") _
pipeline {
    agent any
    triggers {
        cron('30 5 * * *')
    }
    parameters {
        string(name: 'BASE_URL', defaultValue: 'https://dq-qa.dq.cp.collibra.dev', description: 'Base URL for tests')
        string(name: 'ISS', defaultValue: 'automation', description: 'ISS parameter for tests')
        string(name: 'MARKS', defaultValue: 'connection_warmup', description: 'Comma-separated test marks to include')
        string(name: 'EXCLUDE_KEYWORD', defaultValue: '', description: 'Keyword to exclude tests')
    }
    stages {
        stage('Setup Virtual Environment') {
            steps {
                sh 'python3.11 -m venv venv'
                script {
                    withEnv(["PATH+VENV=venv/bin"]) {
                        sh 'source venv/bin/activate && python -m pip install --upgrade pip'
                        sh 'source venv/bin/activate && pip install -r requirements.txt'
                        sh 'python --version'
                    }
                }
            }
        }
        stage('Run Tests and Generate Allure Reports') {
            parallel {
                stage('General Tests') {
                    steps {
                        script {
                            def pytestCommand = 'source venv/bin/activate && pytest -m "not pushdown and not pullup and not pullup_aef'
                            if (params.MARKS) {
                                pytestCommand += ' and ' + params.MARKS + '"'
                            } else {
                                pytestCommand += '"'
                            }
                            if (params.EXCLUDE_KEYWORD) {
                                pytestCommand += ' -k "not ' + params.EXCLUDE_KEYWORD + '"'
                            }
                            pytestCommand += ' --base_url=${BASE_URL} --iss=${ISS} --dgc_base_url=${DGC_BASE_URL} --alluredir=allure-results'
                            def testResult = sh script: pytestCommand, returnStatus: true
                            if (testResult != 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo 'Some test cases failed. Marking the build as UNSTABLE.'
                            }
                            // Define the environment data
                            def environmentData = [
                                'BASE_URL': params.BASE_URL,
                                'DGC_BASE_URL': params.DGC_BASE_URL,
                                'ISS': params.ISS,
                                'MARKS': params.MARKS,
                                'EXCLUDE_KEYWORD': params.EXCLUDE_KEYWORD
                            ]
                            // Serialize environment data to properties file
                            writeFile file: 'allure-results/environment.properties', text: environmentData.collect { key, value -> "$key=$value" }.join('\n')
                        }
                    }
                }
                stage('Pullup AEF Tests') {
                    steps {
                        script {
                            def pytestCommand = 'source venv/bin/activate && pytest -m "pullup_aef'
                            if (params.MARKS) {
                                pytestCommand += ' and ' + params.MARKS + '"'
                            } else {
                                pytestCommand += '"'
                            }
                            if (params.EXCLUDE_KEYWORD) {
                                pytestCommand += ' -k "not ' + params.EXCLUDE_KEYWORD + '"'
                            }
                            pytestCommand += ' --base_url=${BASE_URL} --iss=${ISS} --alluredir=allure-results'
                            def testResult = sh script: pytestCommand, returnStatus: true
                            if (testResult != 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo 'Some test cases failed. Marking the build as UNSTABLE.'
                            }
                            // Define the environment data
                            def environmentData = [
                                'BASE_URL': params.BASE_URL,
                                'ISS': params.ISS,
                                'MARKS': params.MARKS,
                                'EXCLUDE_KEYWORD': params.EXCLUDE_KEYWORD
                            ]
                            // Serialize environment data to properties file
                            writeFile file: 'allure-results/environment.properties', text: environmentData.collect { key, value -> "$key=$value" }.join('\n')
                        }
                    }
                }
                stage('Pullup Tests') {
                    steps {
                        script {
                            def pytestCommand = 'source venv/bin/activate && pytest -m "pullup'
                            if (params.MARKS) {
                                pytestCommand += ' and ' + params.MARKS + '"'
                            } else {
                                pytestCommand += '"'
                            }
                            if (params.EXCLUDE_KEYWORD) {
                                pytestCommand += ' -k "not ' + params.EXCLUDE_KEYWORD + '"'
                            }
                            pytestCommand += ' --base_url=${BASE_URL} --iss=${ISS} --alluredir=allure-results'
                            def testResult = sh script: pytestCommand, returnStatus: true
                            if (testResult != 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo 'Some test cases failed. Marking the build as UNSTABLE.'
                            }
                            // Define the environment data
                            def environmentData = [
                                'BASE_URL': params.BASE_URL,
                                'ISS': params.ISS,
                                'MARKS': params.MARKS,
                                'EXCLUDE_KEYWORD': params.EXCLUDE_KEYWORD
                            ]
                            // Serialize environment data to properties file
                            writeFile file: 'allure-results/environment.properties', text: environmentData.collect { key, value -> "$key=$value" }.join('\n')
                        }
                    }
                }
                stage('Pushdown General') {
                    steps {
                        script {
                            def pytestCommand = 'source venv/bin/activate && pytest -m "pushdown and not (athena or bigquery or databricks or oracle or redshift or saphana or snowflake or sqlserver or trino)'
                            if (params.MARKS) {
                                pytestCommand += ' and ' + params.MARKS + '"'
                            } else {
                                pytestCommand += '"'
                            }
                            if (params.EXCLUDE_KEYWORD) {
                                pytestCommand += ' -k "not ' + params.EXCLUDE_KEYWORD + '"'
                            }
                            pytestCommand += ' --base_url=${BASE_URL} --iss=${ISS} --alluredir=allure-results'
                            def testResult = sh script: pytestCommand, returnStatus: true
                            if (testResult != 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo 'Some test cases failed. Marking the build as UNSTABLE.'
                            }
                            // Define the environment data
                            def environmentData = [
                                'BASE_URL': params.BASE_URL,
                                'ISS': params.ISS,
                                'MARKS': params.MARKS,
                                'EXCLUDE_KEYWORD': params.EXCLUDE_KEYWORD
                            ]
                            // Serialize environment data to properties file
                            writeFile file: 'allure-results/environment.properties', text: environmentData.collect { key, value -> "$key=$value" }.join('\n')
                        }
                    }
                }
                stage('Pushdown Athena') {
                    steps {
                        script {
                            def pytestCommand = 'source venv/bin/activate && pytest -m "pushdown and athena'
                            if (params.MARKS) {
                                pytestCommand += ' and ' + params.MARKS + '"'
                            } else {
                                pytestCommand += '"'
                            }
                            if (params.EXCLUDE_KEYWORD) {
                                pytestCommand += ' -k "not ' + params.EXCLUDE_KEYWORD + '"'
                            }
                            pytestCommand += ' --base_url=${BASE_URL} --iss=${ISS} --alluredir=allure-results'
                            def testResult = sh script: pytestCommand, returnStatus: true
                            if (testResult != 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo 'Some test cases failed. Marking the build as UNSTABLE.'
                            }
                            // Define the environment data
                            def environmentData = [
                                'BASE_URL': params.BASE_URL,
                                'ISS': params.ISS,
                                'MARKS': params.MARKS,
                                'EXCLUDE_KEYWORD': params.EXCLUDE_KEYWORD
                            ]
                            // Serialize environment data to properties file
                            writeFile file: 'allure-results/environment.properties', text: environmentData.collect { key, value -> "$key=$value" }.join('\n')
                        }
                    }
                }
                stage('Pushdown BigQuery') {
                    steps {
                        script {
                            def pytestCommand = 'source venv/bin/activate && pytest -m "pushdown and bigquery'
                            if (params.MARKS) {
                                pytestCommand += ' and ' + params.MARKS + '"'
                            } else {
                                pytestCommand += '"'
                            }
                            if (params.EXCLUDE_KEYWORD) {
                                pytestCommand += ' -k "not ' + params.EXCLUDE_KEYWORD + '"'
                            }
                            pytestCommand += ' --base_url=${BASE_URL} --iss=${ISS} --alluredir=allure-results'
                            def testResult = sh script: pytestCommand, returnStatus: true
                            if (testResult != 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo 'Some test cases failed. Marking the build as UNSTABLE.'
                            }
                            // Define the environment data
                            def environmentData = [
                                'BASE_URL': params.BASE_URL,
                                'ISS': params.ISS,
                                'MARKS': params.MARKS,
                                'EXCLUDE_KEYWORD': params.EXCLUDE_KEYWORD
                            ]
                            // Serialize environment data to properties file
                            writeFile file: 'allure-results/environment.properties', text: environmentData.collect { key, value -> "$key=$value" }.join('\n')
                        }
                    }
                }
                stage('Pushdown Databricks') {
                    steps {
                        script {
                            def pytestCommand = 'source venv/bin/activate && pytest -m "pushdown and databricks'
                            if (params.MARKS) {
                                pytestCommand += ' and ' + params.MARKS + '"'
                            } else {
                                pytestCommand += '"'
                            }
                            if (params.EXCLUDE_KEYWORD) {
                                pytestCommand += ' -k "not ' + params.EXCLUDE_KEYWORD + '"'
                            }
                            pytestCommand += ' --base_url=${BASE_URL} --iss=${ISS} --alluredir=allure-results'
                            def testResult = sh script: pytestCommand, returnStatus: true
                            if (testResult != 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo 'Some test cases failed. Marking the build as UNSTABLE.'
                            }
                            // Define the environment data
                            def environmentData = [
                                'BASE_URL': params.BASE_URL,
                                'ISS': params.ISS,
                                'MARKS': params.MARKS,
                                'EXCLUDE_KEYWORD': params.EXCLUDE_KEYWORD
                            ]
                            // Serialize environment data to properties file
                            writeFile file: 'allure-results/environment.properties', text: environmentData.collect { key, value -> "$key=$value" }.join('\n')
                        }
                    }
                }
                stage('Pushdown Oracle') {
                    steps {
                        script {
                            def pytestCommand = 'source venv/bin/activate && pytest -m "pushdown and oracle'
                            if (params.MARKS) {
                                pytestCommand += ' and ' + params.MARKS + '"'
                            } else {
                                pytestCommand += '"'
                            }
                            if (params.EXCLUDE_KEYWORD) {
                                pytestCommand += ' -k "not ' + params.EXCLUDE_KEYWORD + '"'
                            }
                            pytestCommand += ' --base_url=${BASE_URL} --iss=${ISS} --alluredir=allure-results'
                            def testResult = sh script: pytestCommand, returnStatus: true
                            if (testResult != 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo 'Some test cases failed. Marking the build as UNSTABLE.'
                            }
                            // Define the environment data
                            def environmentData = [
                                'BASE_URL': params.BASE_URL,
                                'ISS': params.ISS,
                                'MARKS': params.MARKS,
                                'EXCLUDE_KEYWORD': params.EXCLUDE_KEYWORD
                            ]
                            // Serialize environment data to properties file
                            writeFile file: 'allure-results/environment.properties', text: environmentData.collect { key, value -> "$key=$value" }.join('\n')
                        }
                    }
                }
                stage('Pushdown Redshift') {
                    steps {
                        script {
                            def pytestCommand = 'source venv/bin/activate && pytest -m "pushdown and redshift'
                            if (params.MARKS) {
                                pytestCommand += ' and ' + params.MARKS + '"'
                            } else {
                                pytestCommand += '"'
                            }
                            if (params.EXCLUDE_KEYWORD) {
                                pytestCommand += ' -k "not ' + params.EXCLUDE_KEYWORD + '"'
                            }
                            pytestCommand += ' --base_url=${BASE_URL} --iss=${ISS} --alluredir=allure-results'
                            def testResult = sh script: pytestCommand, returnStatus: true
                            if (testResult != 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo 'Some test cases failed. Marking the build as UNSTABLE.'
                            }
                            // Define the environment data
                            def environmentData = [
                                'BASE_URL': params.BASE_URL,
                                'ISS': params.ISS,
                                'MARKS': params.MARKS,
                                'EXCLUDE_KEYWORD': params.EXCLUDE_KEYWORD
                            ]
                            // Serialize environment data to properties file
                            writeFile file: 'allure-results/environment.properties', text: environmentData.collect { key, value -> "$key=$value" }.join('\n')
                        }
                    }
                }
                stage('Pushdown SAP HANA') {
                    steps {
                        script {
                            def pytestCommand = 'source venv/bin/activate && pytest -m "pushdown and saphana'
                            if (params.MARKS) {
                                pytestCommand += ' and ' + params.MARKS + '"'
                            } else {
                                pytestCommand += '"'
                            }
                            if (params.EXCLUDE_KEYWORD) {
                                pytestCommand += ' -k "not ' + params.EXCLUDE_KEYWORD + '"'
                            }
                            pytestCommand += ' --base_url=${BASE_URL} --iss=${ISS} --alluredir=allure-results'
                            def testResult = sh script: pytestCommand, returnStatus: true
                            if (testResult != 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo 'Some test cases failed. Marking the build as UNSTABLE.'
                            }
                            // Define the environment data
                            def environmentData = [
                                'BASE_URL': params.BASE_URL,
                                'ISS': params.ISS,
                                'MARKS': params.MARKS,
                                'EXCLUDE_KEYWORD': params.EXCLUDE_KEYWORD
                            ]
                            // Serialize environment data to properties file
                            writeFile file: 'allure-results/environment.properties', text: environmentData.collect { key, value -> "$key=$value" }.join('\n')
                        }
                    }
                }
                stage('Pushdown Snowflake and Trino') {
                    steps {
                        script {
                            def pytestCommand = 'source venv/bin/activate && pytest -m "pushdown and (snowflake or trino)'
                            if (params.MARKS) {
                                pytestCommand += ' and ' + params.MARKS + '"'
                            } else {
                                pytestCommand += '"'
                            }
                            if (params.EXCLUDE_KEYWORD) {
                                pytestCommand += ' -k "not ' + params.EXCLUDE_KEYWORD + '"'
                            }
                            pytestCommand += ' --base_url=${BASE_URL} --iss=${ISS} --alluredir=allure-results'
                            def testResult = sh script: pytestCommand, returnStatus: true
                            if (testResult != 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo 'Some test cases failed. Marking the build as UNSTABLE.'
                            }
                            // Define the environment data
                            def environmentData = [
                                'BASE_URL': params.BASE_URL,
                                'ISS': params.ISS,
                                'MARKS': params.MARKS,
                                'EXCLUDE_KEYWORD': params.EXCLUDE_KEYWORD
                            ]
                            // Serialize environment data to properties file
                            writeFile file: 'allure-results/environment.properties', text: environmentData.collect { key, value -> "$key=$value" }.join('\n')
                        }
                    }
                }
                stage('Pushdown SQL Server') {
                    steps {
                        script {
                            def pytestCommand = 'source venv/bin/activate && pytest -m "pushdown and sqlserver'
                            if (params.MARKS) {
                                pytestCommand += ' and ' + params.MARKS + '"'
                            } else {
                                pytestCommand += '"'
                            }
                            if (params.EXCLUDE_KEYWORD) {
                                pytestCommand += ' -k "not ' + params.EXCLUDE_KEYWORD + '"'
                            }
                            pytestCommand += ' --base_url=${BASE_URL} --iss=${ISS} --alluredir=allure-results'
                            def testResult = sh script: pytestCommand, returnStatus: true
                            if (testResult != 0) {
                                currentBuild.result = 'UNSTABLE'
                                echo 'Some test cases failed. Marking the build as UNSTABLE.'
                            }
                            // Define the environment data
                            def environmentData = [
                                'BASE_URL': params.BASE_URL,
                                'ISS': params.ISS,
                                'MARKS': params.MARKS,
                                'EXCLUDE_KEYWORD': params.EXCLUDE_KEYWORD
                            ]
                            // Serialize environment data to properties file
                            writeFile file: 'allure-results/environment.properties', text: environmentData.collect { key, value -> "$key=$value" }.join('\n')
                        }
                    }
                }
            }
            post {
                always {
                    allure includeProperties: true, jdk: '', results: [[path: 'allure-results']]
                }
            }
        }
    }
}
