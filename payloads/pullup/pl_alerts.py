import copy
from datetime import datetime
from utils.constants import PROD_RUN_ID

CONN = "APPROVED_ATHENA_UP"  # Note: If on dev environment, conn name is "Approved_Athena_UP"
NOW = datetime.now().strftime("%Y_%m_%d_%H_%M_%S")
DS_NAME = "AUTO_ALERT_TEST"
DS_NAME_ALERTS_BUILDER = "AUTO_ALERT_BUILDER"
DS_NAME_ALERTS_RULES = "AUTO_ALERT_RULES"
DS_NAME_ALERTS_JOB_FAILED_STATUS = "AUTO_PU_ALERT_JOB_FAILURE"
DS_NAME_ALERTS_JOB_SUCCESS_STATUS = "AUTO_PU_ALERT_JOB_SUCCESS"
DS_NAME_ALERTS_GLOBAL_JOB_FAILURE = "AUTO_PU_ALERT_GLOBAL_JOB_FAILURE"
DS_QUERY_JOB_SUCCESS = "select * from berka.accounts"
DS_QUERY_JOB_FAILURE = "selected vks from berka.accounts"
TABLE = "default.accounts"
ROW_COUNT = 100
QUERY = (
    f"select account_id, district_id, frequency, CAST(date as TIMESTAMP) as date "
    f"from {TABLE} limit {ROW_COUNT}"
)

# Notes:
#   Test does not fail with invalid email addresses
#   This forwards the email to the dq-alerts Slack channel
EMAIL = "dq-alerts-aaaadzxeeappnuk46h7zzz47uu@collibra.slack.com"
EMAIL_MULTI_COMMA = (
    "fakeEmailCollibra1@notarealdomaincollibra.com,"
    "dq-alerts-aaaadzxeeappnuk46h7zzz47uu@collibra.slack.com"
)
EMAIL_MULTI_SEMICOLON = (
    "fakeEmailCollibra2@notarealdomaincollibra.com;"
    "dq-alerts-aaaadzxeeappnuk46h7zzz47uu@collibra.slack.com"
)
PL_NEW_ALERT_NOTIFY_RULE_NAME = "AUTO_BAD_DISTRICT_ID"

# Data for testing create/update/delete.
PL_NEW_ALERT = {
    "dataset": DS_NAME,
    "alertNm": "AUTO_ALERT_V3_CREATION_" + str(NOW),
    "alertCond": "score > 0",
    "alertFormat": "EMAIL",
    "alertFormatValue": EMAIL,
    "alertMsg": "AUTO ALERT V3 MSG CREATION " + str(NOW),
    "batchName": "",
}
PL_NEW_ALERT_V2 = {
    "datasetName": DS_NAME,
    "alertNm": "AUTO_ALERT_V2_CREATION_" + str(NOW),
    "alertCond": "score > 0",
    "alertFormat": "EMAIL",
    "alertFormatValue": EMAIL,
    "alertMsg": "AUTO ALERT V2 MSG CREATION " + str(NOW),
    "batchName": "",
}

# Data for testing alert v3 builder. Always want to force one, so nonsensical alert conditions
PL_NEW_ALERT_NOTIFY_MULTI = {
    "dataset": DS_NAME_ALERTS_BUILDER,
    "alertNm": "AUTO_ALERT_MULTI_EMAIL_COMMA",
    "alertCond": "score <= 100",
    "alertFormat": "EMAIL",
    "alertFormatValue": EMAIL_MULTI_COMMA,
    "alertMsg": "AUTO ALERT MSG MULTI EMAIL COMMA",
    "batchName": "auto_alert_multi_email_comma_batch",
}
PL_NEW_ALERT_NOTIFY_MULTI_SEMI = {
    "dataset": DS_NAME_ALERTS_BUILDER,
    "alertNm": "AUTO_ALERT_MULTI_EMAIL_SEMICOLON",
    "alertCond": "totalTimeInSeconds > -1",
    "alertFormat": "EMAIL",
    "alertFormatValue": EMAIL_MULTI_SEMICOLON,
    "alertMsg": "AUTO ALERT MSG MULTI EMAIL SEMICOLON",
    "batchName": "auto_alert_multi_email_semicolon_batch",
}
PL_NEW_ALERT_NOTIFY_SINGLE = {
    "dataset": DS_NAME_ALERTS_BUILDER,
    "alertNm": "AUTO_ALERT_SINGLE_EMAIL",
    "alertCond": "rc > 0",
    "alertFormat": "EMAIL",
    "alertFormatValue": EMAIL,
    "alertMsg": "AUTO ALERT MSG SINGLE EMAIL",
    "batchName": "auto_alert_single_email_batch",
}

# Data for testing alert v2 builder. Always want to force one, so nonsensical alert conditions
PL_NEW_ALERT_NOTIFY_MULTI_V2 = {
    "datasetName": DS_NAME_ALERTS_BUILDER,
    "alertNm": "AUTO_ALERT_V2_MULTI_EMAIL_COMMA",
    "alertCond": "score <= 100",
    "alertFormat": "EMAIL",
    "alertFormatValue": EMAIL_MULTI_COMMA,
    "alertMsg": "AUTO ALERT V2 MSG MULTI EMAIL COMMA",
    "batchName": "auto_alert_multi_email_comma_batch",
}
PL_NEW_ALERT_NOTIFY_MULTI_SEMI_V2 = {
    "datasetName": DS_NAME_ALERTS_BUILDER,
    "alertNm": "AUTO_ALERT_V2_MULTI_EMAIL_SEMICOLON",
    "alertCond": "totalTimeInSeconds > -1",
    "alertFormat": "EMAIL",
    "alertFormatValue": EMAIL_MULTI_SEMICOLON,
    "alertMsg": "AUTO ALERT V2 MSG MULTI EMAIL SEMICOLON",
    "batchName": "auto_alert_v2_multi_email_semicolon_batch",
}
PL_NEW_ALERT_NOTIFY_SINGLE_V2 = {
    "datasetName": DS_NAME_ALERTS_BUILDER,
    "alertNm": "AUTO_ALERT_V2_SINGLE_EMAIL",
    "alertCond": "rc > 0",
    "alertFormat": "EMAIL",
    "alertFormatValue": EMAIL,
    "alertMsg": "AUTO ALERT V2 MSG SINGLE EMAIL",
    "batchName": "auto_alert_v2_single_email_batch",
}

# Data for testing alerts via rules. Always want to force one, so nonsensical alert conditions
PULLUP_ALERTS_RULES_RULE_DEFINITIONS = [
    {
        "dataset": DS_NAME_ALERTS_RULES,
        "ruleNm": "AUTO_BAD_DISTRICT_ID",
        "ruleType": "SQLG",
        "ruleValue": "district_id > 0",
        "points": 1,
        "perc": 1.0,
        "ruleRepo": "",
        "isActive": 1,
        "userNm": None,
        "exception": None,
        "columnName": "",
        "businessCategory": "",
        "businessDesc": "",
        "dimId": None,
        "dimName": None,
        "ruleValueBuilder": None,
        "previewLimit": 6,
        "runTimeLimit": 30.0,
        "scoringScheme": 0,
        "filterQuery": None,
        "tolerance": 0,
        "active": True,
    }
]

# Unintuitive behavior note: The alert condition is the qty of results of the rule output.
# So "alertCond" is the name of the alert & send an alert if more than zero rules broken occur.
PL_NEW_ALERT_RULES_ALERT = {
    "datasetName": DS_NAME_ALERTS_RULES,
    "alertNm": "AUTO_ALERT_RULES_CREATION",
    "alertCond": f"{PL_NEW_ALERT_NOTIFY_RULE_NAME} > 0",  # << More than 0 rules broken
    "alertFormat": "EMAIL",
    "alertFormatValue": EMAIL,
    "alertMsg": "AUTO ALERT RULES MSG CREATION",
    "batchName": "auto_alert_single_email_rules_batch",
}

PL_NEW_SUCCESS_JOB_ALERT_PAYLOAD = {
    "dataset": DS_NAME_ALERTS_JOB_SUCCESS_STATUS,
    "runId": PROD_RUN_ID,
    "runIdEnd": "",
    "runState": "DRAFT",
    "passFail": 1,
    "passFailLimit": 75,
    "jobDescription": "",
    "jobId": {"id": -1, "uuid": None},
    "coreMaxActiveConnections": None,
    "linkId": None,
    "licenseKey": "",
    "logFile": "",
    "logLevel": "INFO",
    "hootOnly": False,
    "prettyPrint": True,
    "useTemplate": False,
    "parallel": False,
    "plan": False,
    "dataPreviewOff": False,
    "datasetSafeOff": False,
    "obslimit": 300,
    "pgUser": "",
    "pgPassword": "",
    "host": "10.64.2.3:5432/rc202408?currentSchema=automation",
    "port": None,
    "user": "anonymous : use -owluser",
    "alertEmail": "",
    "scheduleTime": None,
    "schemaScore": 1,
    "optionAppend": "",
    "keyDelimiter": "~~",
    "agentId": {"id": 6, "uuid": "d78be266-29cc-464f-b1d6-a7f245783fce"},
    "load": {
        "readonly": False,
        "passwordManager": None,
        "alias": "",
        "query": DS_QUERY_JOB_SUCCESS,
        "queryHistory": "",
        "key": "",
        "expression": "",
        "addDateColumn": False,
        "zeroFillNone": False,
        "replaceNones": "",
        "stringMode": False,
        "operator": "=",
        "dateColumn": "",
        "transform": "",
        "filter": "",
        "filterNot": "",
        "sample": 1,
        "backRun": 0,
        "backRunBin": "DAY",
        "unionLookBack": False,
        "unionLookBackMinRow": 0,
        "cache": True,
        "dateFormat": "yyyy-MM-dd",
        "timeFormat": "HH:mm:ss.SSS",
        "timestamp": False,
        "filePath": "",
        "fileQuery": "",
        "fullFile": False,
        "fileHeader": None,
        "inferSchema": True,
        "fileType": None,
        "delimiter": ",",
        "fileCharSet": "UTF-8",
        "skipLines": 0,
        "avroSchema": "",
        "xmlRowTag": "",
        "flatten": False,
        "handleMaps": False,
        "handleMixedJson": False,
        "multiLine": False,
        "lib": "/opt/owl/drivers/postgres/",
        "additionalLib": "",
        "driverName": "org.postgresql.Driver",
        "connectionName": "APPROVED_POSTGRES_UP",
        "connectionUrl": "jdbc:postgresql://35.190.143.55:5432/postgres?cs=test&test=test&t2=t2",
        "userName": "autoadmin01@cdq-ad.dq.cp.collibra.dev",
        "password": "",
        "connectionProperties": {},
        "hiveNative": False,
        "hiveNativeHWC": False,
        "useSql": True,
        "columnName": None,
        "lowerBound": None,
        "upperBound": None,
        "numPartitions": 0,
        "partitionNumber": 0,
        "escapeWithBackTick": False,
        "escapeWithSingleQuote": False,
        "escapeWithDoubleQuote": False,
        "escapeCharacter": "",
        "checkHeader": True,
        "archiveConnection": "",
        "coreFetchMode": False,
        "archiveBreaks": False,
        "ruleSerial": False,
    },
    "pushdown": {
        "dataset": "berka.accounts",
        "connectionName": "",
        "maxConnections": 10,
        "sourceQuery": "",
        "backRuns": 0,
        "backRunBin": "DAY",
        "dateFormatType": "DATE",
        "threads": 5,
        "manualSourceQuery": False,
        "key": "",
        "sourceOutputSchema": "",
        "sourceBreakRules": False,
        "sourceBreakOutliers": False,
        "sourceBreakDupes": False,
        "sourceBreakShapes": False,
        "sourceBreakResults": False,
        "sqlLoggingToggle": True,
    },
    "outliers": [],
    "patterns": [],
    "dupe": {
        "on": False,
        "only": False,
        "include": None,
        "exclude": None,
        "depth": 0,
        "lowerBound": 99,
        "upperBound": 100,
        "approximate": 1,
        "limitPerDupe": 15,
        "checkHeader": True,
        "filter": None,
        "ignoreCase": True,
        "score": 1,
        "limit": 300,
    },
    "profile": {
        "on": True,
        "only": False,
        "include": None,
        "exclude": None,
        "correlation": False,
        "histogram": False,
        "semantic": None,
        "dataConceptId": 300,
        "limit": 300,
        "histogramLimit": 0,
        "score": 1,
        "shape": False,
        "shapeTotalScore": 0,
        "shapeSensitivity": 0,
        "shapeMaxPerCol": 20,
        "shapeMaxColSize": 12,
        "shapeGranular": None,
        "behavioralDimension": "",
        "behavioralDimensionGroup": "",
        "behavioralValueColumn": "",
        "behaviorScoreOff": False,
        "behaviorLookback": 10,
        "behaviorMinSupport": 4,
        "profilePushDown": None,
        "behaviorRowCheck": False,
        "behaviorTimeCheck": False,
        "behaviorMinValueCheck": False,
        "behaviorMaxValueCheck": False,
        "behaviorMeanValueCheck": False,
        "behaviorNoneCheck": False,
        "behaviorEmptyCheck": False,
        "behaviorUniqueCheck": False,
        "profileStringLength": False,
        "detectStringNumerics": True,
        "detectTopnBotn": True,
        "detectScalePrecision": True,
        "adaptiveTier": None,
        "advancedTier": None,
        "filter": "",
    },
    "source": {
        "on": False,
        "only": False,
        "validateValues": False,
        "key": None,
        "include": None,
        "exclude": None,
        "includeSrc": None,
        "excludeSrc": None,
        "map": None,
        "score": 1,
        "limit": 30,
        "sourcePushDownCount": False,
        "checkType": True,
        "checkCase": False,
        "validateSchemaOrder": False,
        "matches": False,
        "validateValuesThreshold": 0.9,
        "validateValuesThresholdStrictDownScore": False,
        "validateValuesShowAll": False,
        "validateValuesIgnoreNone": False,
        "validateValuesIgnoreEmpty": False,
        "validateValuesIgnorePrecision": False,
        "validateValuesTrim": False,
        "validateValuesShowMissingKeys": False,
        "validateSrcJoinOnly": False,
        "validateValuesFilter": "",
        "dataset": "",
        "driverName": "",
        "user": "",
        "password": "",
        "passwordManager": "",
        "connectionName": "",
        "connectionUrl": "",
        "query": "",
        "lib": "",
        "connectionProperties": {},
        "filePath": "",
        "fileQuery": "",
        "fullFile": False,
        "header": None,
        "skipLines": 0,
        "inferSchema": True,
        "fileType": None,
        "delimiter": ",",
        "fileCharSet": "UTF-8",
        "avroSchema": "",
        "xmlRowTag": "",
        "flatten": False,
        "handleMaps": False,
        "handleMixedJson": False,
        "multiLine": False,
        "filterCols": None,
    },
    "rule": {
        "on": True,
        "only": False,
        "lib": None,
        "name": "",
        "absoluteScoring": False,
        "ruleBreakPreviewLimit": 6,
    },
    "colMatch": {
        "colMatchParallelProcesses": 3,
        "colMatchDurationMins": 20,
        "colMatchBatchSize": 2,
        "level": "exact",
        "fuzzyDistance": 1,
        "connectionList": [],
    },
    "spark": {
        "numExecutors": 1,
        "driverMemory": "2g",
        "executorMemory": "2g",
        "executorCores": 1,
        "conf": "",
        "queue": "",
        "master": "k8s://",
        "principal": "",
        "keyTab": "",
        "deployMode": "cluster",
        "jars": None,
        "packages": None,
        "files": None,
    },
    "env": {"dataset": "berka.accounts", "jdbcPrincipal": "", "jdbcKeyTab": ""},
    "record": {
        "on": False,
        "in": "",
        "notIn": "",
        "include": None,
        "percDeltaLimit": 0.1,
        "score": 1,
        "dataset": None,
        "dateColumn": None,
        "keyColumn": None,
        "timeBin": "DAY",
        "by": None,
    },
    "stream": None,
    "pipeline": [],
    "metaTags": None,
    "outlierConfiguration": None,
    "shape": {
        "enabled": False,
        "totalScore": 0,
        "sensitivity": 0,
        "maxPerCol": 20,
        "maxColSize": 12,
        "granular": None,
        "columnSettings": [],
    },
    "jobSchedule": None,
    "connectionType": "PULLUP",
}
PL_NEW_FAILURE_JOB_ALERT_PAYLOAD = copy.deepcopy(PL_NEW_SUCCESS_JOB_ALERT_PAYLOAD)
PL_NEW_FAILURE_JOB_ALERT_PAYLOAD["dataset"] = DS_NAME_ALERTS_JOB_FAILED_STATUS
PL_NEW_FAILURE_JOB_ALERT_PAYLOAD["load"]["query"] = DS_QUERY_JOB_FAILURE
PL_NEW_GLOBAL_FAILURE_JOB_PAYLOAD = copy.deepcopy(PL_NEW_SUCCESS_JOB_ALERT_PAYLOAD)
PL_NEW_GLOBAL_FAILURE_JOB_PAYLOAD["load"]["query"] = DS_QUERY_JOB_FAILURE
PL_NEW_GLOBAL_FAILURE_JOB_PAYLOAD["dataset"] = DS_NAME_ALERTS_GLOBAL_JOB_FAILURE
PL_NEW_JOB_STATUS_SUCCESS_ALERT = {
    "dataset": DS_NAME_ALERTS_JOB_SUCCESS_STATUS,
    "alertNm": "AUTO_ALERT_V3_JOB_STATUS_SUCCESS_" + str(NOW),
    "alertCond": "score>=0",
    "alertFormatValue": "dq-alerts-aaaadzxeeappnuk46h7zzz47uu@collibra.slack.com",
    "alertMsg": "AUTO JOB RUN SUCCESS NEW " + str(NOW),
    "batchName": "",
    "alertFormat": "EMAIL",
    "alertTriggerType": "2",
}
PL_UPDATED_JOB_STATUS_SUCCESS_ALERT = {
    "dataset": DS_NAME_ALERTS_JOB_SUCCESS_STATUS,
    "alertNm": "AUTO_ALERT_V3_JOB_STATUS_SUCCESS_" + str(NOW),
    "alertCond": "score>=0",
    "alertFormatValue": "dq-alerts-aaaadzxeeappnuk46h7zzz47uu@collibra.slack.com",
    "alertMsg": "AUTO JOB RUN SUCCESS UPDATED " + str(NOW),
    "batchName": "",
    "alertFormat": "EMAIL",
    "alertTriggerType": "2",
}
PL_NEW_JOB_STATUS_FAILURE_ALERT = {
    "dataset": DS_NAME_ALERTS_JOB_FAILED_STATUS,
    "alertNm": "AUTO_ALERT_V3_JOB_STATUS_FAILURE_" + str(NOW),
    "alertCond": "N/A",
    "alertFormatValue": "dq-alerts-aaaadzxeeappnuk46h7zzz47uu@collibra.slack.com",
    "alertMsg": "AUTO JOB RUN FAILURE NEW " + str(NOW),
    "batchName": "",
    "alertFormat": "EMAIL",
    "alertTriggerType": "1",
}
PL_UPDATED_JOB_STATUS_FAILURE_ALERT = {
    "dataset": DS_NAME_ALERTS_JOB_FAILED_STATUS,
    "alertNm": "AUTO_ALERT_V3_JOB_STATUS_FAILURE_" + str(NOW),
    "alertCond": "N/A",
    "alertFormatValue": "dq-alerts-aaaadzxeeappnuk46h7zzz47uu@collibra.slack.com",
    "alertMsg": "AUTO JOB RUN FAILURE UPDATE " + str(NOW),
    "batchName": "",
    "alertFormat": "EMAIL",
    "alertTriggerType": "1",
}

PL_CONDITION_ALERTS_JOB_PAYLOAD = {
    "dataset": "",
    "runId": PROD_RUN_ID,
    "runIdEnd": "",
    "runState": "DRAFT",
    "passFail": 1,
    "passFailLimit": 75,
    "jobId": None,
    "linkId": None,
    "licenseKey": "",
    "logFile": "",
    "logLevel": "INFO",
    "hootOnly": False,
    "prettyPrint": True,
    "useTemplate": False,
    "parallel": False,
    "plan": False,
    "dataPreviewOff": False,
    "datasetSafeOff": False,
    "obslimit": 300,
    "pgUser": "",
    "pgPassword": "",
    "host": "10.64.2.3:5432/dqqa?currentSchema=automation",
    "port": "5432/dqqa?currentSchema=automation",
    "user": "autoadmin01@cdq-ad.dq.cp.collibra.dev",
    "alertEmail": None,
    "scheduleTime": None,
    "schemaScore": 1,
    "optionAppend": "",
    "keyDelimiter": "~~",
    "agentId": {"id": 6, "uuid": "8eb1f6a8-70ab-4285-a903-b587523ae61e"},
    "load": {
        "dataset": "",
        "readonly": False,
        "passwordManager": None,
        "alias": "",
        "query": "select * from public.sales_data_002",
        "queryHistory": "",
        "key": "",
        "expression": "",
        "addDateColumn": False,
        "zeroFillNone": False,
        "replaceNones": "",
        "stringMode": False,
        "operator": None,
        "dateColumn": None,
        "transform": None,
        "filter": "",
        "filterNot": "",
        "sample": 1,
        "backRun": 0,
        "backRunBin": "DAY",
        "unionLookBack": False,
        "unionLookBackMinRow": 0,
        "cache": True,
        "dateFormat": "yyyy-MM-dd",
        "timeFormat": "HH:mm:ss.SSS",
        "timestamp": False,
        "filePath": "",
        "fileQuery": "",
        "fullFile": False,
        "fileHeader": None,
        "checkHeader": True,
        "inferSchema": True,
        "fileType": None,
        "delimiter": ",",
        "fileCharSet": "UTF-8",
        "skipLines": 0,
        "avroSchema": "",
        "xmlRowTag": "",
        "flatten": False,
        "handleMaps": False,
        "handleMixedJson": False,
        "multiLine": False,
        "lib": "/opt/owl/drivers/postgres/",
        "additionalLib": "",
        "driverName": "org.postgresql.Driver",
        "connectionName": "APPROVED_POSTGRES_UP",
        "connectionUrl": "",
        "userName": "",
        "password": "",
        "connectionProperties": {},
        "hiveNative": False,
        "hiveNativeHWC": False,
        "useSql": True,
        "columnName": None,
        "lowerBound": None,
        "upperBound": None,
        "numPartitions": 0,
        "escapeWithBackTick": False,
        "escapeWithSingleQuote": False,
        "escapeWithDoubleQuote": False,
        "partitionNumber": 0,
        "archiveBreaks": False,
        "archiveConnection": "",
        "ruleSerial": False,
        "coreFetchMode": False,
        "escapeCharacter": "",
        "hasHeader": True,
    },
    "outliers": [],
    "outlier": {
        "id": None,
        "dataset": None,
        "on": False,
        "only": False,
        "lookback": 5,
        "lookbackQuery": "",
        "key": None,
        "include": None,
        "exclude": None,
        "dateColumn": None,
        "timeColumn": None,
        "timeBin": "DAY",
        "timeBinQuery": "",
        "categorical": True,
        "by": None,
        "limit": 300,
        "minHistory": 3,
        "historyLimit": 5,
        "score": 1,
        "aggFunc": "",
        "aggQuery": "",
        "query": "",
        "q1": 0.15,
        "q3": 0.85,
        "categoricalColumnConcatenation": False,
        "limitCategorical": None,
        "measurementUnit": "",
        "multiplierUpper": 1.35,
        "multiplierLower": 1.35,
        "record": True,
        "filter": None,
        "combine": True,
        "categoricalConfidenceType": "",
        "categoricalTopN": 3,
        "categoricalBottomN": 2,
        "categoricalMaxConfidence": 0.02,
        "categoricalMaxFrequencyPercentile": 0.25,
        "categoricalMinFrequency": 1,
        "categoricalMinVariance": 0,
        "categoricalMaxCategoryN": 1,
        "categoricalParallel": True,
        "categoricalAlgorithm": "",
        "categoricalAlgorithmParameters": {},
    },
    "pattern": {
        "id": None,
        "dataset": None,
        "only": False,
        "lookback": 5,
        "key": None,
        "dateColumn": None,
        "include": None,
        "exclude": None,
        "score": 1,
        "minSupport": 0.000033,
        "confidence": 0.6,
        "limit": 30,
        "query": "",
        "filter": None,
        "timeBin": "DAY",
        "on": False,
        "match": True,
        "lowFreq": False,
        "bucketLimit": 450000,
        "deDupe": True,
    },
    "patterns": [],
    "dupe": {
        "dataset": None,
        "on": False,
        "only": False,
        "include": None,
        "exclude": None,
        "depth": 0,
        "lowerBound": 99,
        "upperBound": 100,
        "approximate": 1,
        "limitPerDupe": 15,
        "checkHeader": True,
        "filter": None,
        "ignoreCase": True,
        "score": 1,
        "limit": 300,
    },
    "pushdown": {
        "dataset": "Test_Row_Count",
        "connectionName": "",
        "maxConnections": 10,
        "sourceQuery": "",
        "backRuns": 0,
        "backRunBin": "DAY",
        "dateFormatType": "DATE",
        "threads": 5,
        "manualSourceQuery": False,
        "key": "",
        "sourceOutputSchema": "",
        "sourceBreakRules": False,
        "sourceBreakOutliers": False,
        "sourceBreakDupes": False,
        "sourceBreakShapes": False,
        "sourceBreakResults": False,
        "sqlLoggingToggle": True,
        "unionLookback": False,
        "unionLookbackMin": 5,
    },
    "profile": {
        "dataset": "Test_Row_Count",
        "on": True,
        "only": False,
        "include": None,
        "exclude": None,
        "filter": "",
        "shape": True,
        "correlation": None,
        "histogram": None,
        "semantic": None,
        "limit": 300,
        "histogramLimit": 0,
        "score": 1,
        "shapeTotalScore": 0,
        "shapeSensitivity": 0,
        "shapeMaxPerCol": 0,
        "shapeMaxColSize": 0,
        "shapeGranular": False,
        "behavioralDimension": "",
        "behavioralDimensionGroup": "",
        "behavioralValueColumn": "",
        "behaviorScoreOff": False,
        "behaviorLookback": 10,
        "behaviorMinSupport": 4,
        "profilePushDown": None,
        "behaviorRowCheck": True,
        "behaviorTimeCheck": False,
        "behaviorMinValueCheck": False,
        "behaviorMaxValueCheck": False,
        "behaviorMeanValueCheck": False,
        "behaviorNoneCheck": True,
        "behaviorEmptyCheck": True,
        "behaviorUniqueCheck": True,
        "adaptiveTier": None,
        "profileStringLength": False,
        "detectStringNumerics": True,
        "detectTopnBotn": True,
        "detectScalePrecision": True,
        "dataConceptId": None,
        "advancedTier": None,
    },
    "source": {
        "on": False,
        "only": False,
        "validateValues": False,
        "key": None,
        "include": None,
        "exclude": None,
        "includeSrc": None,
        "excludeSrc": None,
        "map": None,
        "score": 1,
        "limit": 30,
        "sourcePushDownCount": False,
        "checkType": True,
        "checkCase": False,
        "validateSchemaOrder": False,
        "matches": False,
        "validateValuesThreshold": 0.9,
        "validateValuesThresholdStrictDownScore": False,
        "validateValuesShowAll": False,
        "validateValuesIgnoreNone": False,
        "validateValuesIgnoreEmpty": False,
        "validateValuesIgnorePrecision": False,
        "validateValuesTrim": False,
        "validateValuesShowMissingKeys": False,
        "validateSrcJoinOnly": False,
        "validateValuesFilter": "",
        "dataset": "",
        "datasetSrc": "",
        "driverName": "",
        "user": "",
        "password": "",
        "passwordManager": "",
        "connectionName": "",
        "connectionUrl": "",
        "query": "",
        "lib": "",
        "connectionProperties": {},
        "filePath": "",
        "fileQuery": "",
        "fullFile": False,
        "header": None,
        "skipLines": 0,
        "inferSchema": True,
        "fileType": None,
        "delimiter": ",",
        "fileCharSet": "UTF-8",
        "avroSchema": "",
        "xmlRowTag": "",
        "flatten": False,
        "handleMaps": False,
        "handleMixedJson": False,
        "multiLine": False,
        "filterCols": None,
        "hasHeader": True,
    },
    "rule": {
        "on": True,
        "only": False,
        "lib": None,
        "name": "",
        "absoluteScoring": False,
        "ruleBreakPreviewLimit": 6,
    },
    "colMatch": {
        "dataset": "Test_Row_Count",
        "colMatchParallelProcesses": 3,
        "colMatchDurationMins": 20,
        "colMatchBatchSize": 2,
        "level": "exact",
        "fuzzyDistance": 1,
        "connectionList": [],
    },
    "spark": {
        "dataset": "Test_Row_Count",
        "numExecutors": 1,
        "driverMemory": "1g",
        "executorMemory": "2g",
        "executorCores": 1,
        "conf": "",
        "queue": "",
        "master": "k8s://",
        "principal": "",
        "keyTab": "",
        "deployMode": "cluster",
        "jars": None,
        "packages": None,
        "files": None,
    },
    "env": {"dataset": "Test_Row_Count", "jdbcPrincipal": "", "jdbcKeyTab": ""},
    "stream": None,
    "record": {
        "dataset": None,
        "on": False,
        "in": "",
        "notIn": "",
        "include": None,
        "percDeltaLimit": 0.1,
        "score": 1,
        "keyColumn": None,
        "dateColumn": None,
        "timeBin": "DAY",
        "by": None,
    },
    "transforms": [],
    "pipeline": [],
    "jobDescription": "",
}

PL_NEW_CONDITION_ROW_COUNT_ALERT = {
    "dataset": "AUTO_PU_CONDITION_ALERT_ROW_COUNT",
    "alertNm": "AUTO_ROW_COUNT_ALERT",
    "alertCond": "rc>0",
    "alertFormat": "EMAIL",
    "alertFormatValue": "dq-alerts-aaaadzxeeappnuk46h7zzz47uu@collibra.slack.com",
    "alertMsg": "Row Count Alert Test!!!",
    "alertTypes": ["CONDITION"],
}

PL_NEW_CONDITION_JOB_SCORE_ALERT = {
    "dataset": "AUTO_PU_CONDITION_ALERT_JOB_SCORE",
    "alertNm": "AUTO_JOB_SCORE_ALERT",
    "alertCond": "score>0",
    "alertFormat": "EMAIL",
    "alertFormatValue": "dq-alerts-aaaadzxeeappnuk46h7zzz47uu@collibra.slack.com",
    "alertMsg": "Job Score Alert Test!!!",
    "alertTypes": ["CONDITION"],
}

PL_JOB_PAYLOAD_DEFAULT = {
    "dataset": "",
    "runId": PROD_RUN_ID,
    "runIdEnd": "",
    "runDateAdjustment": None,
    "runState": "DRAFT",
    "passFail": 1,
    "passFailLimit": 75,
    "jobId": None,
    "linkId": None,
    "licenseKey": "",
    "logFile": "",
    "logLevel": "INFO",
    "hootOnly": False,
    "prettyPrint": True,
    "useTemplate": False,
    "parallel": False,
    "plan": False,
    "dataPreviewOff": False,
    "datasetSafeOff": False,
    "obslimit": 300,
    "pgUser": "",
    "pgPassword": "",
    "host": "10.64.2.3:5432/dqqa?currentSchema=automation",
    "port": "5432/dqqa?currentSchema=automation",
    "user": "autoadmin01@cdq-ad.dq.cp.collibra.dev",
    "alertEmail": None,
    "scheduleTime": None,
    "schemaScore": 1,
    "optionAppend": "",
    "keyDelimiter": "~~",
    "agentId": {"id": 6, "uuid": "8eb1f6a8-70ab-4285-a903-b587523ae61e"},
    "load": {
        "dataset": "",
        "readonly": False,
        "passwordManager": None,
        "alias": "",
        "query": "select * from PUBLIC.SALES",
        "queryHistory": "",
        "key": "",
        "expression": "",
        "addDateColumn": False,
        "zeroFillNone": False,
        "replaceNones": "",
        "stringMode": False,
        "operator": None,
        "dateColumn": None,
        "transform": None,
        "filter": "",
        "filterNot": "",
        "sample": 1,
        "backRun": 0,
        "backRunBin": "DAY",
        "unionLookBack": False,
        "unionLookBackMinRow": 0,
        "cache": True,
        "dateFormat": "yyyy-MM-dd",
        "timeFormat": "HH:mm:ss.SSS",
        "timestamp": False,
        "filePath": "",
        "fileQuery": "",
        "fullFile": False,
        "fileHeader": None,
        "checkHeader": True,
        "inferSchema": True,
        "fileType": None,
        "delimiter": ",",
        "fileCharSet": "UTF-8",
        "skipLines": 0,
        "avroSchema": "",
        "xmlRowTag": "",
        "flatten": False,
        "handleMaps": False,
        "handleMixedJson": False,
        "multiLine": False,
        "lib": "/opt/owl/drivers/snowflake/",
        "additionalLib": "",
        "driverName": "net.snowflake.client.jdbc.SnowflakeDriver",
        "connectionName": "APPROVED_SNOWFLAKE_UP",
        "connectionUrl": "",
        "userName": "",
        "password": "",
        "connectionProperties": {},
        "hiveNative": False,
        "hiveNativeHWC": False,
        "useSql": True,
        "columnName": None,
        "lowerBound": None,
        "upperBound": None,
        "numPartitions": 0,
        "escapeWithBackTick": False,
        "escapeWithSingleQuote": False,
        "escapeWithDoubleQuote": False,
        "partitionNumber": 0,
        "archiveBreaks": False,
        "archiveConnection": "",
        "ruleSerial": False,
        "coreFetchMode": False,
        "escapeCharacter": "",
        "hasHeader": True,
    },
    "outliers": [],
    "outlier": {
        "id": None,
        "dataset": None,
        "on": False,
        "only": False,
        "lookback": 5,
        "lookbackQuery": "",
        "key": None,
        "include": None,
        "exclude": None,
        "dateColumn": None,
        "timeColumn": None,
        "timeBin": "DAY",
        "timeBinQuery": "",
        "categorical": True,
        "by": None,
        "limit": 300,
        "prevRunId": None,
        "minHistory": 3,
        "historyLimit": 5,
        "score": 1,
        "aggFunc": "",
        "aggQuery": "",
        "query": "",
        "q1": 0.15,
        "q3": 0.85,
        "categoricalColumnConcatenation": False,
        "limitCategorical": None,
        "measurementUnit": "",
        "multiplierUpper": 1.35,
        "multiplierLower": 1.35,
        "record": True,
        "filter": None,
        "combine": True,
        "categoricalConfidenceType": "",
        "categoricalTopN": 3,
        "categoricalBottomN": 2,
        "categoricalMaxConfidence": 0.02,
        "categoricalMaxFrequencyPercentile": 0.25,
        "categoricalMinFrequency": 1,
        "categoricalMinVariance": 0,
        "categoricalMaxCategoryN": 1,
        "categoricalParallel": True,
        "categoricalAlgorithm": "",
        "categoricalAlgorithmParameters": {},
    },
    "pattern": {
        "id": None,
        "dataset": None,
        "only": False,
        "lookback": 5,
        "key": None,
        "dateColumn": None,
        "include": None,
        "exclude": None,
        "score": 1,
        "minSupport": 0.000033,
        "confidence": 0.6,
        "limit": 30,
        "query": "",
        "filter": None,
        "timeBin": "DAY",
        "on": False,
        "match": True,
        "lowFreq": False,
        "bucketLimit": 450000,
        "deDupe": True,
    },
    "patterns": [],
    "dupe": {
        "dataset": None,
        "on": False,
        "only": False,
        "include": None,
        "exclude": None,
        "depth": 0,
        "lowerBound": 99,
        "upperBound": 100,
        "approximate": 1,
        "limitPerDupe": 15,
        "checkHeader": True,
        "filter": None,
        "ignoreCase": True,
        "score": 1,
        "limit": 300,
    },
    "pushdown": {
        "dataset": "",
        "connectionName": "",
        "maxConnections": 10,
        "sourceQuery": "",
        "backRuns": 0,
        "backRunBin": "DAY",
        "dateFormatType": "DATE",
        "threads": 5,
        "manualSourceQuery": False,
        "key": "",
        "sourceOutputSchema": "",
        "sourceBreakRules": False,
        "sourceBreakOutliers": False,
        "sourceBreakDupes": False,
        "sourceBreakShapes": False,
        "sourceBreakResults": False,
        "sqlLoggingToggle": True,
        "unionLookback": False,
        "unionLookbackMin": 5,
    },
    "profile": {
        "dataset": "",
        "on": True,
        "only": False,
        "include": None,
        "exclude": None,
        "filter": "",
        "shape": False,
        "correlation": None,
        "histogram": None,
        "semantic": None,
        "limit": 300,
        "histogramLimit": 0,
        "score": 1,
        "shapeTotalScore": 0,
        "shapeSensitivity": 0,
        "shapeMaxPerCol": 0,
        "shapeMaxColSize": 0,
        "shapeGranular": False,
        "behavioralDimension": "",
        "behavioralDimensionGroup": "",
        "behavioralValueColumn": "",
        "behaviorScoreOff": False,
        "behaviorLookback": 10,
        "behaviorMinSupport": 4,
        "profilePushDown": None,
        "behaviorRowCheck": False,
        "behaviorTimeCheck": False,
        "behaviorMinValueCheck": False,
        "behaviorMaxValueCheck": False,
        "behaviorMeanValueCheck": False,
        "behaviorNoneCheck": False,
        "behaviorEmptyCheck": False,
        "behaviorUniqueCheck": False,
        "adaptiveTier": None,
        "profileStringLength": False,
        "detectStringNumerics": True,
        "detectTopnBotn": True,
        "detectScalePrecision": True,
        "maskSensitive": False,
        "dataConceptId": None,
        "advancedTier": None,
    },
    "source": {
        "on": False,
        "only": False,
        "validateValues": False,
        "key": None,
        "include": None,
        "exclude": None,
        "includeSrc": None,
        "excludeSrc": None,
        "map": None,
        "score": 1,
        "limit": 30,
        "sourcePushDownCount": False,
        "checkType": True,
        "checkCase": False,
        "validateSchemaOrder": False,
        "matches": False,
        "validateValuesThreshold": 0.9,
        "validateValuesThresholdStrictDownScore": False,
        "validateValuesShowAll": False,
        "validateValuesIgnoreNone": False,
        "validateValuesIgnoreEmpty": False,
        "validateValuesIgnorePrecision": False,
        "validateValuesTrim": False,
        "validateValuesShowMissingKeys": False,
        "validateSrcJoinOnly": False,
        "validateValuesFilter": "",
        "dataset": "",
        "datasetSrc": "",
        "driverName": "",
        "user": "",
        "password": "",
        "passwordManager": "",
        "connectionName": "",
        "connectionUrl": "",
        "query": "",
        "lib": "",
        "connectionProperties": {},
        "filePath": "",
        "fileQuery": "",
        "fullFile": False,
        "header": None,
        "skipLines": 0,
        "inferSchema": True,
        "fileType": None,
        "delimiter": ",",
        "fileCharSet": "UTF-8",
        "avroSchema": "",
        "xmlRowTag": "",
        "flatten": False,
        "handleMaps": False,
        "handleMixedJson": False,
        "multiLine": False,
        "filterCols": None,
        "hasHeader": True,
    },
    "rule": {
        "on": True,
        "only": False,
        "lib": None,
        "name": "",
        "absoluteScoring": False,
        "ruleBreakPreviewLimit": 6,
    },
    "colMatch": {
        "dataset": "",
        "colMatchParallelProcesses": 3,
        "colMatchDurationMins": 20,
        "colMatchBatchSize": 2,
        "level": "exact",
        "fuzzyDistance": 1,
        "connectionList": [],
    },
    "spark": {
        "dataset": "",
        "numExecutors": 1,
        "driverMemory": "1g",
        "executorMemory": "2g",
        "executorCores": 1,
        "conf": "",
        "queue": "",
        "master": "k8s://",
        "principal": "",
        "keyTab": "",
        "deployMode": "cluster",
        "jars": None,
        "packages": None,
        "files": None,
    },
    "env": {"dataset": "", "jdbcPrincipal": "", "jdbcKeyTab": ""},
    "stream": None,
    "record": {
        "dataset": None,
        "on": False,
        "in": "",
        "notIn": "",
        "include": None,
        "percDeltaLimit": 0.1,
        "score": 1,
        "keyColumn": None,
        "dateColumn": None,
        "timeBin": "DAY",
        "by": None,
    },
    "transforms": [],
    "pipeline": [],
    "jobDescription": "",
}

PL_NEW_RULE_BREAK_ALERT = {
    "dataset": "",
    "alertNm": "AUTO_RULE_BREAK_ALERT",
    "alertCond": "score>=0",
    "alertFormat": "EMAIL",
    "alertFormatValue": "dq-alerts-aaaadzxeeappnuk46h7zzz47uu@collibra.slack.com",
    "alertMsg": "Rule Break Alert Test!!!",
    "alertTypes": ["BREAKING"],
}

PL_BREAKING_RULE_FOR_SALES = [
    {
        "dataset": "AUTO_PU_RULE_BREAK_ALERT_JOB",
        "ruleNm": "Sales_greater_than_1000",
        "ruleType": "SQLF",
        "ruleValue": "SELECT * FROM @AUTO_PU_RULE_BREAK_ALERT_JOB WHERE SALES>1000",
        "filterQuery": "",
        "points": 1,
        "ruleRepo": "",
        "perc": 1,
        "columnName": None,
        "businessCategory": "",
        "businessDesc": "",
        "dimId": None,
        "scoringScheme": 0,
        "tolerance": 0,
    }
]

PL_PASSING_RULE_FOR_SALES = [
    {
        "dataset": "AUTO_PU_RULE_BREAK_ALERT_JOB",
        "ruleNm": "Sales_greater_than_1000",
        "ruleType": "SQLF",
        "ruleValue": "SELECT * FROM @AUTO_PU_RULE_BREAK_ALERT_JOB WHERE SALES>100000",
        "filterQuery": "",
        "points": 1,
        "ruleRepo": "",
        "perc": 1,
        "columnName": None,
        "businessCategory": "",
        "businessDesc": "",
        "dimId": None,
        "scoringScheme": 0,
        "tolerance": 0,
    }
]

PL_PU_CONDITION_RULE_FOR_SALES = {
    "dataset": "AUTO_PULLUP_CONDITION_ALERT_JOB",
    "ruleNm": "AUTO_SIMPLE_RULE",
    "ruleType": "SQLG",
    "ruleValue": "SALES>5000",
    "filterQuery": "",
    "points": 1,
    "ruleRepo": "",
    "perc": 1,
    "columnName": None,
    "businessCategory": "",
    "businessDesc": "",
    "dimId": None,
    "scoringScheme": 0,
    "tolerance": 0,
}

PL_SIMPLE_RULE_FOR_SALES = [
    {
        "dataset": "AUTO_PULLUP_CONDITION_ALERT_JOB",
        "ruleNm": "AUTO_SIMPLE_RULE",
        "ruleType": "SQLG",
        "ruleValue": "NAME IS NOT NULL",
        "filterQuery": "",
        "points": 1,
        "ruleRepo": "",
        "perc": 1,
        "columnName": None,
        "businessCategory": "",
        "businessDesc": "",
        "dimId": None,
        "scoringScheme": 0,
        "tolerance": 0,
    }
]

PL_FREEFORM_RULE_FOR_SALES = [
    {
        "dataset": "AUTO_PULLUP_CONDITION_ALERT_JOB",
        "ruleNm": "AUTO_FREEFORM_RULE",
        "ruleType": "SQLF",
        "ruleValue": "SELECT * FROM @AUTO_PULLUP_CONDITION_ALERT_JOB WHERE SALES>1000",
        "filterQuery": "",
        "points": 1,
        "ruleRepo": "",
        "perc": 1,
        "columnName": None,
        "businessCategory": "",
        "businessDesc": "",
        "dimId": None,
        "scoringScheme": 0,
        "tolerance": 0,
    }
]

PL_CONDITION_SIMPLE_RULE_ALERT = {
    "dataset": "AUTO_PULLUP_CONDITION_ALERT_JOB",
    "alertNm": "AUTO_CONDITION_SIMPLE_RULE_ALERT",
    "alertCond": "AUTO_SIMPLE_RULE > 0",
    "alertFormat": "EMAIL",
    "alertFormatValue": "dq-alerts-aaaadzxeeappnuk46h7zzz47uu@collibra.slack.com",
    "alertMsg": "Simple Rule Condition Alert Test!!!",
    "alertTypes": ["CONDITION"],
}

PL_CONDITION_FREEFORM_RULE_ALERT = {
    "dataset": "AUTO_PULLUP_CONDITION_ALERT_JOB",
    "alertNm": "AUTO_CONDITION_FREEFORM_RULE_ALERT",
    "alertCond": "AUTO_FREEFORM_RULE > 0",
    "alertFormat": "EMAIL",
    "alertFormatValue": "dq-alerts-aaaadzxeeappnuk46h7zzz47uu@collibra.slack.com",
    "alertMsg": "Freeform Rule Condition Alert Test!!!",
    "alertTypes": ["CONDITION"],
}
